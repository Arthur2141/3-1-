//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CbScene
// {
//
//   row_major float4x4 viewProjection; // Offset:    0 Size:    64
//   float4 lightDirection;             // Offset:   64 Size:    16 [unused]
//   float4 viewPosition;               // Offset:   80 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CbScene                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// POSITION                 0   xyz         1     NONE   float   xyz 
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xy          3     NONE   float   xy  
// COLOR                    0   xyzw        4     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float   xyz 
// SV_POSITION              0   xyzw        2      POS   float   xyzw
// TEXCOORD                 0   xy          3     NONE   float   xy  
// COLOR                    0   xyzw        4     NONE   float   xyzw
//
gs_4_0
dcl_constantbuffer CB0[4], immediateIndexed
dcl_input_siv v[3][0].xyzw, position
dcl_input v[3][1].xyz
dcl_input v[3][2].xyz
dcl_input v[3][3].xy
dcl_input v[3][4].xyzw
dcl_temps 6
dcl_inputprimitive triangle 
dcl_outputtopology trianglestrip 
dcl_output o0.xyz
dcl_output o1.xyz
dcl_output_siv o2.xyzw, position
dcl_output o3.xy
dcl_output o4.xyzw
dcl_maxout 3
//
// Initial variable locations:
//   m0 <- output; 
//   v[0][0].x <- input[0].position.x; v[0][0].y <- input[0].position.y; v[0][0].z <- input[0].position.z; v[0][0].w <- input[0].position.w; 
//   v[0][1].x <- input[0].wposition.x; v[0][1].y <- input[0].wposition.y; v[0][1].z <- input[0].wposition.z; 
//   v[0][2].x <- input[0].wnomal.x; v[0][2].y <- input[0].wnomal.y; v[0][2].z <- input[0].wnomal.z; 
//   v[0][3].x <- input[0].texcoord.x; v[0][3].y <- input[0].texcoord.y; 
//   v[0][4].x <- input[0].color.x; v[0][4].y <- input[0].color.y; v[0][4].z <- input[0].color.z; v[0][4].w <- input[0].color.w; 
//   v[1][0].x <- input[1].position.x; v[1][0].y <- input[1].position.y; v[1][0].z <- input[1].position.z; v[1][0].w <- input[1].position.w; 
//   v[1][1].x <- input[1].wposition.x; v[1][1].y <- input[1].wposition.y; v[1][1].z <- input[1].wposition.z; 
//   v[1][2].x <- input[1].wnomal.x; v[1][2].y <- input[1].wnomal.y; v[1][2].z <- input[1].wnomal.z; 
//   v[1][3].x <- input[1].texcoord.x; v[1][3].y <- input[1].texcoord.y; 
//   v[1][4].x <- input[1].color.x; v[1][4].y <- input[1].color.y; v[1][4].z <- input[1].color.z; v[1][4].w <- input[1].color.w; 
//   v[2][0].x <- input[2].position.x; v[2][0].y <- input[2].position.y; v[2][0].z <- input[2].position.z; v[2][0].w <- input[2].position.w; 
//   v[2][1].x <- input[2].wposition.x; v[2][1].y <- input[2].wposition.y; v[2][1].z <- input[2].wposition.z; 
//   v[2][2].x <- input[2].wnomal.x; v[2][2].y <- input[2].wnomal.y; v[2][2].z <- input[2].wnomal.z; 
//   v[2][3].x <- input[2].texcoord.x; v[2][3].y <- input[2].texcoord.y; 
//   v[2][4].x <- input[2].color.x; v[2][4].y <- input[2].color.y; v[2][4].z <- input[2].color.z; v[2][4].w <- input[2].color.w
//
#line 11 "C:\Users\2230273\Documents\3-1-\HLSL\PhongDistructGS.hlsl"
mov r0.xyz, -v[0][1].zxyz
add r0.xyz, r0.xyzx, v[1][1].zxyz  // r0.x <- v1.z; r0.y <- v1.x; r0.z <- v1.y

#line 12
mov r1.xyz, -v[0][1].yzxy
add r1.xyz, r1.xyzx, v[2][1].yzxy  // r1.x <- v2.y; r1.y <- v2.z; r1.z <- v2.x

#line 13
mul r2.xyz, r0.zxyz, r1.yzxy
mul r0.xyz, r0.xyzx, r1.xyzx
mov r0.xyz, -r0.xyzx
add r0.xyz, r0.xyzx, r2.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- n.x; r0.y <- n.y; r0.z <- n.z

#line 15
mov r0.w, l(0)  // r0.w <- i
mov r1.x, r0.w  // r1.x <- i
loop 
  mov r1.y, l(3)
  ult r1.y, r1.x, r1.y
  breakc_z r1.y

#line 18
  mul r1.yzw, r0.xxyz, l(0.000000, 0.200000, 0.200000, 0.200000)
  add r1.yzw, r1.yyzw, v[r1.x + 0][1].xxyz  // r1.y <- wposition.x; r1.z <- wposition.y; r1.w <- wposition.z

#line 19
  mul r2.xyzw, r1.yyyy, cb0[0].xyzw
  mul r3.xyzw, r1.zzzz, cb0[1].xyzw
  add r2.xyzw, r2.xyzw, r3.xyzw
  mul r3.xyzw, r1.wwww, cb0[2].xyzw
  add r2.xyzw, r2.xyzw, r3.xyzw
  mul r3.xyzw, cb0[3].xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  add r2.xyzw, r2.xyzw, r3.xyzw  // r2.x <- element.position.x; r2.y <- element.position.y; r2.z <- element.position.z; r2.w <- element.position.w

#line 21
  mov r1.yzw, r1.yyzw  // r1.y <- element.wposition.x; r1.z <- element.wposition.y; r1.w <- element.wposition.z

#line 22
  mov r3.xy, v[r1.x + 0][3].xyxx  // r3.x <- element.texcoord.x; r3.y <- element.texcoord.y

#line 23
  mov r4.xyzw, v[r1.x + 0][4].xyzw  // r4.x <- element.color.x; r4.y <- element.color.y; r4.z <- element.color.z; r4.w <- element.color.w

#line 24
  mov r5.xyz, v[r1.x + 0][2].xyzx  // r5.x <- element.wnomal.x; r5.y <- element.wnomal.y; r5.z <- element.wnomal.z

#line 25
  mov o0.xyz, r1.yzwy
  mov o1.xyz, r5.xyzx
  mov o2.xyzw, r2.xyzw
  mov o3.xy, r3.xyxx
  mov o4.xyzw, r4.xyzw
  emit 

#line 26
  iadd r1.x, r1.x, l(1)
endloop 

#line 27
cut 

#line 29
ret 
// Approximately 40 instruction slots used
