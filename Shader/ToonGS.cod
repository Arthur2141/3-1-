//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CbScene
// {
//
//   row_major float4x4 viewProjection; // Offset:    0 Size:    64
//   float4 lightDirection;             // Offset:   64 Size:    16 [unused]
//   float4 viewPosition;               // Offset:   80 Size:    16
//   row_major float4x4 shadowViewProjection;// Offset:   96 Size:    64 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CbScene                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// COLOR                    0   xyzw        2     NONE   float   xyzw
// NORMAL                   0   xyzw        3     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// COLOR                    0   xyzw        2     NONE   float   xyzw
// POSITION                 0   xyzw        3     NONE   float   xyzw
// NORMAL                   0   xyzw        4     NONE   float   xyzw
//
gs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[6], immediateIndexed
dcl_input v[3][0].xyzw
dcl_input v[3][1].xy
dcl_input v[3][2].xyzw
dcl_input v[3][3].xyzw
dcl_temps 5
dcl_inputprimitive triangle 
dcl_stream m0
dcl_outputtopology trianglestrip 
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_maxout 6
//
// Initial variable locations:
//   m0 <- output; 
//   v[0][0].x <- input[0].wposition.x; v[0][0].y <- input[0].wposition.y; v[0][0].z <- input[0].wposition.z; v[0][0].w <- input[0].wposition.w; 
//   v[0][1].x <- input[0].texcoord.x; v[0][1].y <- input[0].texcoord.y; 
//   v[0][2].x <- input[0].color.x; v[0][2].y <- input[0].color.y; v[0][2].z <- input[0].color.z; v[0][2].w <- input[0].color.w; 
//   v[0][3].x <- input[0].wnormal.x; v[0][3].y <- input[0].wnormal.y; v[0][3].z <- input[0].wnormal.z; v[0][3].w <- input[0].wnormal.w; 
//   v[1][0].x <- input[1].wposition.x; v[1][0].y <- input[1].wposition.y; v[1][0].z <- input[1].wposition.z; v[1][0].w <- input[1].wposition.w; 
//   v[1][1].x <- input[1].texcoord.x; v[1][1].y <- input[1].texcoord.y; 
//   v[1][2].x <- input[1].color.x; v[1][2].y <- input[1].color.y; v[1][2].z <- input[1].color.z; v[1][2].w <- input[1].color.w; 
//   v[1][3].x <- input[1].wnormal.x; v[1][3].y <- input[1].wnormal.y; v[1][3].z <- input[1].wnormal.z; v[1][3].w <- input[1].wnormal.w; 
//   v[2][0].x <- input[2].wposition.x; v[2][0].y <- input[2].wposition.y; v[2][0].z <- input[2].wposition.z; v[2][0].w <- input[2].wposition.w; 
//   v[2][1].x <- input[2].texcoord.x; v[2][1].y <- input[2].texcoord.y; 
//   v[2][2].x <- input[2].color.x; v[2][2].y <- input[2].color.y; v[2][2].z <- input[2].color.z; v[2][2].w <- input[2].color.w; 
//   v[2][3].x <- input[2].wnormal.x; v[2][3].y <- input[2].wnormal.y; v[2][3].z <- input[2].wnormal.z; v[2][3].w <- input[2].wnormal.w
//
#line 12 "C:\Users\2230273\OneDrive - yamaguchigakuen\チEクトップ\ゲームプログラミング\ゲームプログラミングⅢ・Ⅳ(20231204)Particle\HLSL\ToonGS.hlsl"
mov r0.x, l(0)  // r0.x <- i
mov r0.y, r0.x  // r0.y <- i
loop 
  ilt r0.z, r0.y, l(3)
  breakc_z r0.z

#line 14
  mul r1.xyzw, cb0[0].xyzw, v[r0.y + 0][0].xxxx
  mul r2.xyzw, cb0[1].xyzw, v[r0.y + 0][0].yyyy
  add r1.xyzw, r1.xyzw, r2.xyzw
  mul r2.xyzw, cb0[2].xyzw, v[r0.y + 0][0].zzzz
  add r1.xyzw, r1.xyzw, r2.xyzw
  mul r2.xyzw, cb0[3].xyzw, v[r0.y + 0][0].wwww
  add r1.xyzw, r1.xyzw, r2.xyzw  // r1.x <- element.position.x; r1.y <- element.position.y; r1.z <- element.position.z; r1.w <- element.position.w

#line 15
  mov r2.xyzw, v[r0.y + 0][0].xyzw  // r2.x <- element.wposition.x; r2.y <- element.wposition.y; r2.z <- element.wposition.z; r2.w <- element.wposition.w

#line 16
  mov r3.xyzw, v[r0.y + 0][3].xyzw  // r3.x <- element.wnormal.x; r3.y <- element.wnormal.y; r3.z <- element.wnormal.z; r3.w <- element.wnormal.w

#line 17
  mov r0.zw, v[r0.y + 0][1].xxxy  // r0.z <- element.texcoord.x; r0.w <- element.texcoord.y

#line 18
  mov r4.xyzw, v[r0.y + 0][2].xyzw  // r4.x <- element.color.x; r4.y <- element.color.y; r4.z <- element.color.z; r4.w <- element.color.w

#line 19
  mov o0.xyzw, r1.xyzw
  mov o1.xy, r0.zwzz
  mov o2.xyzw, r4.xyzw
  mov o3.xyzw, r2.xyzw
  mov o4.xyzw, r3.xyzw
  emit_stream m0

#line 20
  iadd r0.y, r0.y, l(1)
endloop 

#line 21
cut_stream m0

#line 24
mov r0.x, l(2)  // r0.x <- i
mov r0.y, r0.x  // r0.y <- i
loop 
  ige r0.z, r0.y, l(0)
  breakc_z r0.z

#line 26
  mov r1.xyz, -v[r0.y + 0][0].xyzx
  add r1.xyz, r1.xyzx, cb0[5].xyzx
  dp3 r0.z, r1.xyzx, r1.xyzx
  sqrt r0.z, r0.z  // r0.z <- dist

#line 27
  mov r0.w, r0.y
  div r0.z, r0.z, l(1000.000000)
  max r0.z, r0.z, l(0.000000)
  min r0.z, r0.z, l(1.000000)
  add r0.z, r0.z, l(0.010000)
  mul r1.xyzw, r0.zzzz, v[r0.y + 0][3].xyzw
  add r1.xyzw, r1.xyzw, v[r0.w + 0][0].xyzw  // r1.x <- P.x; r1.y <- P.y; r1.z <- P.z; r1.w <- P.w

#line 28
  mul r2.xyzw, r1.xxxx, cb0[0].xyzw
  mul r3.xyzw, r1.yyyy, cb0[1].xyzw
  add r2.xyzw, r2.xyzw, r3.xyzw
  mul r3.xyzw, r1.zzzz, cb0[2].xyzw
  add r2.xyzw, r2.xyzw, r3.xyzw
  mul r3.xyzw, r1.wwww, cb0[3].xyzw
  add r2.xyzw, r2.xyzw, r3.xyzw  // r2.x <- element.position.x; r2.y <- element.position.y; r2.z <- element.position.z; r2.w <- element.position.w

#line 29
  mov r1.xyzw, r1.xyzw  // r1.x <- element.wposition.x; r1.y <- element.wposition.y; r1.z <- element.wposition.z; r1.w <- element.wposition.w

#line 30
  mov r3.xyzw, v[r0.y + 0][3].xyzw  // r3.x <- element.wnormal.x; r3.y <- element.wnormal.y; r3.z <- element.wnormal.z; r3.w <- element.wnormal.w

#line 31
  mov r0.zw, v[r0.y + 0][1].xxxy  // r0.z <- element.texcoord.x; r0.w <- element.texcoord.y

#line 32
  itof r4.xyzw, l(0, 0, 0, 1)  // r4.x <- element.color.x; r4.y <- element.color.y; r4.z <- element.color.z; r4.w <- element.color.w

#line 34
  mov o0.xyzw, r2.xyzw
  mov o1.xy, r0.zwzz
  mov o2.xyzw, r4.xyzw
  mov o3.xyzw, r1.xyzw
  mov o4.xyzw, r3.xyzw
  emit_stream m0

#line 35
  iadd r0.y, r0.y, l(-1)
endloop 

#line 38
cut_stream m0

#line 40
ret 
// Approximately 62 instruction slots used
