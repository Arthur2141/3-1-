//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CBPerCubeMap
// {
//
//   row_major float4x4 ViewMat[6];     // Offset:    0 Size:   384
//   row_major float4x4 Projection;     // Offset:  384 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CBPerCubeMap                      cbuffer      NA          NA            cb3      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float   xy  
// COLOR                    0   xyzw        3     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xy          4     NONE   float   xy  
// SV_RenderTargetArrayIndex     0   x           5  RTINDEX    uint   x   
//
gs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB3[28], dynamicIndexed
dcl_input_siv v[3][0].xyzw, position
dcl_input v[3][1].xyz
dcl_input v[3][2].xy
dcl_input v[3][3].xyzw
dcl_temps 6
dcl_inputprimitive triangle 
dcl_stream m0
dcl_outputtopology trianglestrip 
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyz
dcl_output o3.xyz
dcl_output o4.xy
dcl_output_siv o5.x, rendertarget_array_index
dcl_maxout 18
//
// Initial variable locations:
//   m0 <- output; 
//   v[0][0].x <- input[0].Position.x; v[0][0].y <- input[0].Position.y; v[0][0].z <- input[0].Position.z; v[0][0].w <- input[0].Position.w; 
//   v[0][1].x <- input[0].Normal.x; v[0][1].y <- input[0].Normal.y; v[0][1].z <- input[0].Normal.z; 
//   v[0][2].x <- input[0].Tex.x; v[0][2].y <- input[0].Tex.y; 
//   v[0][3].x <- input[0].Color.x; v[0][3].y <- input[0].Color.y; v[0][3].z <- input[0].Color.z; v[0][3].w <- input[0].Color.w; 
//   v[1][0].x <- input[1].Position.x; v[1][0].y <- input[1].Position.y; v[1][0].z <- input[1].Position.z; v[1][0].w <- input[1].Position.w; 
//   v[1][1].x <- input[1].Normal.x; v[1][1].y <- input[1].Normal.y; v[1][1].z <- input[1].Normal.z; 
//   v[1][2].x <- input[1].Tex.x; v[1][2].y <- input[1].Tex.y; 
//   v[1][3].x <- input[1].Color.x; v[1][3].y <- input[1].Color.y; v[1][3].z <- input[1].Color.z; v[1][3].w <- input[1].Color.w; 
//   v[2][0].x <- input[2].Position.x; v[2][0].y <- input[2].Position.y; v[2][0].z <- input[2].Position.z; v[2][0].w <- input[2].Position.w; 
//   v[2][1].x <- input[2].Normal.x; v[2][1].y <- input[2].Normal.y; v[2][1].z <- input[2].Normal.z; 
//   v[2][2].x <- input[2].Tex.x; v[2][2].y <- input[2].Tex.y; 
//   v[2][3].x <- input[2].Color.x; v[2][3].y <- input[2].Color.y; v[2][3].z <- input[2].Color.z; v[2][3].w <- input[2].Color.w
//
#line 14 "C:\Users\2230273\Documents\3-1-\HLSL\makeCubeMapShaderGS.hlsl"
mov r0.x, l(0)  // r0.x <- f
mov r0.y, r0.x  // r0.y <- f
loop 
  ilt r0.z, r0.y, l(6)
  breakc_z r0.z

#line 16
  itof r1.xyz, l(0, 0, 0, 0)  // r1.x <- element.wPosition.x; r1.y <- element.wPosition.y; r1.z <- element.wPosition.z

#line 17
  mov r0.y, r0.y  // r0.y <- element.RTIndex

#line 18
  mov r0.z, l(0)  // r0.z <- i
  mov r0.w, r0.z  // r0.w <- i
  loop 
    ilt r1.w, r0.w, l(3)
    breakc_z r1.w

#line 25
    imul null, r1.w, r0.y, l(4)
    mul r2.xyzw, cb3[r1.w + 0].xyzw, v[r0.w + 0][0].xxxx
    mul r3.xyzw, cb3[r1.w + 1].xyzw, v[r0.w + 0][0].yyyy
    add r2.xyzw, r2.xyzw, r3.xyzw
    mul r3.xyzw, cb3[r1.w + 2].xyzw, v[r0.w + 0][0].zzzz
    add r2.xyzw, r2.xyzw, r3.xyzw
    mul r3.xyzw, cb3[r1.w + 3].xyzw, v[r0.w + 0][0].wwww
    add r2.xyzw, r2.xyzw, r3.xyzw  // r2.x <- P.x; r2.y <- P.y; r2.z <- P.z; r2.w <- P.w

#line 26
    mul r3.xyzw, r2.xxxx, cb3[24].xyzw
    mul r4.xyzw, r2.yyyy, cb3[25].xyzw
    add r3.xyzw, r3.xyzw, r4.xyzw
    mul r4.xyzw, r2.zzzz, cb3[26].xyzw
    add r3.xyzw, r3.xyzw, r4.xyzw
    mul r2.xyzw, r2.wwww, cb3[27].xyzw
    add r2.xyzw, r2.xyzw, r3.xyzw  // r2.x <- element.Position.x; r2.y <- element.Position.y; r2.z <- element.Position.z; r2.w <- element.Position.w

#line 30
    dp3 r1.w, v[r0.w + 0][1].xyzx, v[r0.w + 0][1].xyzx
    rsq r1.w, r1.w
    mul r3.xyz, r1.wwww, v[r0.w + 0][1].xyzx  // r3.x <- element.wNormal.x; r3.y <- element.wNormal.y; r3.z <- element.wNormal.z

#line 32
    mov r4.xyzw, v[r0.w + 0][3].xyzw  // r4.x <- element.Color.x; r4.y <- element.Color.y; r4.z <- element.Color.z; r4.w <- element.Color.w

#line 35
    mov r5.xy, v[r0.w + 0][2].xyxx  // r5.x <- element.Tex.x; r5.y <- element.Tex.y

#line 37
    mov o0.xyzw, r2.xyzw
    mov o1.xyzw, r4.xyzw
    mov o2.xyz, r3.xyzx
    mov o3.xyz, r1.xyzx
    mov o4.xy, r5.xyxx
    mov o5.x, r0.y
    emit_stream m0

#line 38
    iadd r0.w, r0.w, l(1)
  endloop 

#line 39
  cut_stream m0

#line 40
  iadd r0.y, r0.y, l(1)
endloop 

#line 41
ret 
// Approximately 45 instruction slots used
